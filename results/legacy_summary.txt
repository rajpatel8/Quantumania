
üõ°Ô∏è  QUANTUM CRYPTOGRAPHY VULNERABILITY SCAN REPORT
============================================================

üìä SCAN SUMMARY:
‚Ä¢ Target: ../test_samples
‚Ä¢ Files Scanned: 2
‚Ä¢ Crypto Findings: 19
‚Ä¢ Quantum Vulnerable: 15

üö® RISK BREAKDOWN:
‚Ä¢ Critical Risk: 12
‚Ä¢ High Risk: 3
‚Ä¢ Medium Risk: 0
‚Ä¢ Low Risk: 0

üìã QUANTUM-VULNERABLE FINDINGS:

‚Ä¢ ../test_samples/vulnerable_code.java:4
  Algorithm: RSA
  Risk: CRITICAL
  Timeline: 2030-2035
  Code: import java.security.KeyPairGenerator;...

‚Ä¢ ../test_samples/vulnerable_code.java:14
  Algorithm: RSA
  Risk: CRITICAL
  Timeline: 2030-2035
  Code: KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");...

‚Ä¢ ../test_samples/vulnerable_code.java:21
  Algorithm: ECC
  Risk: CRITICAL
  Timeline: 2030-2035
  Code: KeyPairGenerator keyGen = KeyPairGenerator.getInstance("EC");...

‚Ä¢ ../test_samples/vulnerable_code.java:28
  Algorithm: ECC
  Risk: CRITICAL
  Timeline: 2030-2035
  Code: Signature signature = Signature.getInstance("SHA256withECDSA");...

‚Ä¢ ../test_samples/vulnerable_code.java:42
  Algorithm: HASH
  Risk: HIGH
  Timeline: 2035-2040
  Code: MessageDigest md = MessageDigest.getInstance("MD5");...

‚Ä¢ ../test_samples/vulnerable_code.py:13
  Algorithm: RSA
  Risk: CRITICAL
  Timeline: 2030-2035
  Code: key = RSA.generate(2048)...

‚Ä¢ ../test_samples/vulnerable_code.py:22
  Algorithm: ECC
  Risk: CRITICAL
  Timeline: 2030-2035
  Code: private_key = ec.generate_private_key(ec.SECP256R1())...

‚Ä¢ ../test_samples/vulnerable_code.py:31
  Algorithm: HASH
  Risk: HIGH
  Timeline: 2035-2040
  Code: return hashlib.sha1(data.encode()).hexdigest()...

‚Ä¢ ../test_samples/vulnerable_code.py:34
  Algorithm: HASH
  Risk: HIGH
  Timeline: 2035-2040
  Code: return hashlib.md5(data.encode()).hexdigest()...

‚Ä¢ ../test_samples/vulnerable_code.py:6
  Algorithm: RSA
  Risk: CRITICAL
  Timeline: 2030-2035
  Code: from Crypto.Cipher import PKCS1_OAEP...
